## Argument list of the node class constructor
{% macro _constructor_args(node_type) -%}
{%- if node_type.final -%}
    {%- for member in node_type.required_members -%}
        {{- ", " if not loop.first -}}
        {{ member.cpp_type }} {{ member.name }}
    {%- endfor -%}
{%- else -%}
    AstNodeType type
{%- endif -%}
{%- endmacro -%}

## Constructor declaration for node types.
{% macro _constructor_decl(node_type) -%}
    {{ node_type.cpp_name }}({{ _constructor_args(node_type) }});
{%- endmacro %}

## Constructor implementation for node types.
{% macro _constructor_impl(node_type) -%}
{%- if node_type.final -%}
{{ node_type.cpp_name }}::{{ node_type.cpp_name }}({{ _constructor_args(node_type) }})
    : {{ node_type.base.cpp_name }}(AstNodeType::{{ node_type.name }})
    {% for member in node_type.members %}
    , {{ member.field_name }}{% if member.required -%} (std::move({{ member.name }})) {%- else -%} () {%- endif -%}
    {% endfor -%}
{}
{%- else -%}
{{ node_type.cpp_name }}::{{ node_type.cpp_name }}({{ _constructor_args(node_type) }})
    : {{ node_type.base.cpp_name }}(type) {
    TIRO_DEBUG_ASSERT(type >= AstNodeType::First{{node_type.name}}
        && type <= AstNodeType::Last{{node_type.name}},
        "Derived type is invalid for this base class.");
}
{%- endif -%}
{%- endmacro %}

{% macro _member_accessor_type(member) -%}
{%- if member.kind == "data" and member.simple -%}
    {{ member.cpp_type }}
{%- else -%}
    const {{ member.cpp_type }}&
{%- endif -%}
{%- endmacro %}

## In-class member accessor declaration.
{% macro _member_getter_decl(member) %}
{%- if member.kind == "node" -%}
    {{ member.node_type.cpp_name }}* {{ member.name }}() const;
{%- elif member.kind in ["node_list", "data_list"] -%}
    {{ member.cpp_type }}& {{ member.name }}();
    const {{ member.cpp_type }}& {{ member.name }}() const;
{%- else -%}
    {{ _member_accessor_type(member) }} {{ member.name }}() const;
{%- endif %}
{%- endmacro %}

## Member accessor implementation.
{% macro _member_getter_impl(node_type, member) %}
{%- if member.kind == "node" -%}
{{ member.node_type.cpp_name }}* {{ node_type.cpp_name }}::{{ member.name }}() const {
    return {{ member.field_name }}.get();
}
{%- elif member.kind in ["node_list", "data_list"] -%}
{{ member.cpp_type }}& {{ node_type.cpp_name }}::{{ member.name }}() { 
    return {{ member.field_name }};
}

const {{ member.cpp_type }}& {{ node_type.cpp_name }}::{{ member.name }}() const { 
    return {{ member.field_name }};
}
{%- else -%}
{{ _member_accessor_type(member) }} {{ node_type.cpp_name }}::{{ member.name }}() const {
    return {{ member.field_name }};
}
{%- endif -%}
{%- endmacro %}

## In-class member setter declaration.
{% macro _member_setter_decl(member) %}
    void {{ member.name }}({{member.cpp_type}} new_{{member.name}});
{%- endmacro %}

## Member setter implementation.
{% macro _member_setter_impl(node_type, member) %}
void {{ node_type.cpp_name }}::{{ member.name }}({{member.cpp_type}} new_{{member.name}}) { 
    {{ member.field_name }} = std::move(new_{{member.name}});
}
{%- endmacro %}

## Member storage definition (in node class).
{% macro _member_field(member) %}
    {{ member.cpp_type }} {{member.field_name}};
{%- endmacro %}

{% macro _traverse_impl(node_type) -%}
void {{ node_type.cpp_name }}::do_traverse_children(FunctionRef<void(AstNode*)> callback) {
{% if node_type.walk_order == "base_first" %}
    {{ node_type.base.cpp_name }}::do_traverse_children(callback);
{% endif %}
{% for member in node_type.members %}
{% if member.kind == "node" %}
    callback({{ member.field_name }}.get());
{% elif member.kind == "node_list" %}
    traverse_list({{ member.field_name }}, callback);
{% endif %}
{% endfor %}
{% if node_type.walk_order == "derived_first" %}
    {{ node_type.base.cpp_name }}::do_traverse_children(callback);
{% endif %}
}
{%- endmacro %}

{% macro _mutate_impl(node_type) -%}
void {{ node_type.cpp_name }}::do_mutate_children(MutableAstVisitor& visitor) {
{% if node_type.walk_order == "base_first" %}
    {{ node_type.base.cpp_name }}::do_mutate_children(visitor);
{% endif %}
{% for member in node_type.members %}
{% if member.kind in ["node", "node_list"] %}
    visitor.{{ member.visitor_name }}({{ member.field_name }});
{% endif %}
{% endfor %}
{% if node_type.walk_order == "derived_first" %}
    {{ node_type.base.cpp_name }}::do_mutate_children(visitor);
{% endif %}
}
{%- endmacro %}

## Node class definition.
{% macro node_def(node_type) -%}
{{ node_type.doc | as_doc -}}
class {{ node_type.cpp_name }} {{ "final" if node_type.final else "" }} : public {{ node_type.base.cpp_name }} {
{{ "public:" if node_type.final else "protected:" }}
    {{ _constructor_decl(node_type) }}
{{ "public:" if (not node_type.final) else "" }}
    ~{{node_type.cpp_name}}();

{% for member in node_type.members -%}
{{ _member_getter_decl(member) }}
{{ _member_setter_decl(member) }}
{{ "\n" if not loop.last }}
{%- endfor %}

protected:
    void do_traverse_children(FunctionRef<void(AstNode*)> callback) override;
    void do_mutate_children(MutableAstVisitor& visitor) override;

{{ "private:" if node_type.members else "" }}
{% for member in node_type.members -%}
{{ _member_field(member) }}
{% endfor %}
};
{%- endmacro %}

## Node class implementation.
{% macro node_impl(node_type) -%}
{{ _constructor_impl(node_type )}}

{{ node_type.cpp_name }}::~{{ node_type.cpp_name }}() = default;

{% for member in node_type.members -%}
{{ _member_getter_impl(node_type, member) }}

{{ _member_setter_impl(node_type, member) }}
{{- "\n" if not loop.last }}
{% endfor %}

{{ _traverse_impl(node_type) }}

{{ _mutate_impl(node_type) }}
{%- endmacro %}
