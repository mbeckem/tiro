{% import "union_ops.jinja2" as union_ops %}

{% macro _param_decl(type_name, var_name, pass_as, suffix = "") -%}
{%- if pass_as == "copy" -%}
    const {{ type_name }}&
{%- elif pass_as == "move" -%}
    {{ type_name }}
{%- endif -%}
{{- " " -}} {{ var_name }}{{suffix}}
{%- endmacro %}

{% macro _param_value(var_name, pass_as, suffix = "") -%}
{%- if pass_as == "copy" -%}
    {{ var_name }}{{suffix}}
{%- elif pass_as == "move" -%}
    std::move({{ var_name }}{{suffix}})
{%- endif -%}
{%- endmacro %}

{% macro _field_param_decl(field, suffix = "") -%}
{{ _param_decl(field.type, field.name, field.pass_as, suffix) }}
{%- endmacro %}

{% macro _field_param_value(field, suffix = "") -%}
{{ _param_value(field.name, field.pass_as, suffix) }}
{%- endmacro %}


## Definition of a tagged union's member type.
{% macro _member_def(union_type, member) -%}
    {% if union_type.doc_mode == "member" %}{{- member.doc | as_doc -}}{% endif %}
{% if member.kind == "struct" -%}
    struct {{ member.name }} final {
        {% for struct_member in member.members -%}
        {{ struct_member.doc | as_doc -}}
        {{ struct_member.type}} {{ struct_member.name }};
        {{- "\n" if not loop.last and loop.nextitem.doc }}
        {% endfor %}

        {% if member.members | length > 0 -%}
        {{ "explicit" if member.members | length == 1 }} {{ member.name}}(
            {%- for struct_member in member.members -%}
            {{ _field_param_decl(struct_member, "_") }}
            {{- ", " if not loop.last }}
            {%- endfor -%}
        )
        {% for struct_member in member.members %}
            {{ ": " if loop.first else ", " -}}
            {{ struct_member.name}}({{ _field_param_value(struct_member, "_") }})
        {% endfor %}
        {}
        {% endif %}
    };
{%- elif member.kind == "alias" -%}
    using {{ member.name }} = {{ member.target }};
{%- endif %}
{%- endmacro %}

## Declaration of a tagged union's static factory member function.
{% macro _factory_decl(union_type, member) -%}
    static {{union_type.name}} {{member.factory_name}}(
        {%- if member.kind == "struct" %}
            {%- for struct_member in member.members -%}
            {{ _field_param_decl(struct_member) }}
            {{- ", " if not loop.last }}
            {%- endfor -%}
        {%- elif member.kind == "alias" -%}
            {{ _param_decl(member.name, member.argument_name, member.pass_as) }}
        {%- endif -%}
    );
{%- endmacro %}

## Definition of a tagged union's static factory member function.
{% macro _factory_impl(union_type, member) -%}
    {{union_type.name}} {{union_type.name}}::{{member.factory_name}}(
        {%- if member.kind == "struct" %}
            {%- for struct_member in member.members -%}
            {{ _field_param_decl(struct_member) }}
            {{- ", " if not loop.last }}
            {%- endfor -%}
        {%- elif member.kind == "alias" -%}
            {{ _param_decl(member.name, member.argument_name, member.pass_as) }}
        {%- endif -%}
    ) {
    {% if member.kind == "struct" %}
    return {{'{'}}{{member.name}}{
        {%- for struct_member in member.members -%}
        {{ _field_param_value(struct_member) }}
        {{- ", " if not loop.last }}
        {%- endfor -%}
    }{{'}'}};
    {% elif member.kind == "alias" %}
    return {{ _param_value(member.argument_name, member.pass_as)}};
    {% endif %}
}
{%- endmacro %}

## Declaration of a tagged union's constructor for a certain member type.
{% macro _constructor_decl(union_type, member) -%}
    {{union_type.name}}({{member.name}} {{member.argument_name}});
{%- endmacro %}

## Implementation of a tagged union's constructor for a certain member type.
{% macro _constructor_impl(union_type, member) -%}
{{union_type.name}}::{{union_type.name}}({{member.name}} {{member.argument_name}})
    : type_({{union_type.tag.name}}::{{member.name}})
    , {{member.field_name}}(std::move({{member.argument_name}})) {}
{%- endmacro %}

## Declaration of any needed special member functions.
{% macro _special_member_decl(union_type) -%}
{%- if union_type.storage_mode != "trivial" -%}
    ~{{union_type.name}}();

{% if union_type.storage_mode == "movable" %}
    {{union_type.name}}({{union_type.name}}&& other) noexcept;
    {{union_type.name}}& operator=({{union_type.name}}&& other) noexcept;
{% endif -%}
{%- endif -%}
{%- endmacro %}

## Implementation of any needed special member functions.
{% macro _special_member_impl(union_type) -%}
{%- if union_type.storage_mode != "trivial" -%}
{{union_type.name}}::~{{union_type.name}}() {
    _destroy_value();
}

{% if union_type.storage_mode == "movable" %}
{% for member in union_type.members %}
static_assert(std::is_nothrow_move_constructible_v<{{union_type.name}}::{{member.name}}>
    && std::is_nothrow_move_assignable_v<{{union_type.name}}::{{member.name}}>,
    "Only nothrow movable types are supported in generated unions.");
{% endfor %}

{{union_type.name}}::{{union_type.name}}({{union_type.name}}&& other) noexcept
    : type_(other.type()) {
    _move_construct_value(other);
}

{{union_type.name}}& {{union_type.name}}::operator=({{union_type.name}}&& other) noexcept {
    TIRO_DEBUG_ASSERT(this != &other, "Self move assignement is invalid.");
    if (type() == other.type()) {
        _move_assign_value(other);
    } else {
        _destroy_value();
        _move_construct_value(other);
        type_ = other.type();
    }
    return *this;
}
{% endif -%}
{%- endif -%}
{%- endmacro %}

{% macro _helper_decl(union_type) -%}
{%- if union_type.storage_mode != "trivial" -%}
    void _destroy_value() noexcept;
    void _move_construct_value({{union_type.name}}& other) noexcept;
    void _move_assign_value({{union_type.name}}& other) noexcept;
{%- endif -%}
{%- endmacro %}

{% macro _helper_impl(union_type) -%}
{% if union_type.storage_mode != "trivial" -%}
void {{union_type.name}}::_destroy_value() noexcept {
    struct DestroyVisitor {
        {% for member in union_type.members %}
        void {{member.visit_name}}({{member.name}}& {{member.argument_name}}) {
            {{member.argument_name}}.~{{member.name}}();
        }
        {{- "\n" if not loop.last }}
        {% endfor %}
    };
    visit(DestroyVisitor{});
}

void {{union_type.name}}::_move_construct_value({{union_type.name}}& other) noexcept {
    struct ConstructVisitor {
        {{union_type.name}}* self;

        {% for member in union_type.members %}
        void {{member.visit_name}}({{member.name}}& {{member.argument_name}}) {
            new (&self->{{member.field_name}}) {{member.name}}(std::move({{member.argument_name}}));
        }
        {{- "\n" if not loop.last }}
        {% endfor %}
    };
    other.visit(ConstructVisitor{this});
}

void {{union_type.name}}::_move_assign_value({{union_type.name}}& other) noexcept {
    struct AssignVisitor {
        {{union_type.name}}* self;

        {% for member in union_type.members %}
        void {{member.visit_name}}({{member.name}}& {{member.argument_name}}) {
            self->{{member.field_name}} = std::move({{member.argument_name}});
        }
        {{- "\n" if not loop.last }}
        {% endfor %}
    };
    other.visit(AssignVisitor{this});
}

{%- endif -%}
{%- endmacro %}

## Declaration of a tagged union's accessor function.
{% macro _accessor_decl(union_type, member) -%}
    const {{member.name}}& {{member.accessor_name}}() const;
{%- endmacro %}

## Implementation of a tagged union's accessor function.
{% macro _accessor_impl(union_type, member) -%}
const {{union_type.name}}::{{member.name}}& {{union_type.name}}::{{member.accessor_name}}() const {
    TIRO_DEBUG_ASSERT(type_ == {{union_type.tag.name}}::{{member.name}}, "Bad member access on {{union_type.name}}: not a {{member.name}}.");
    return {{member.field_name}};
}
{%- endmacro %}

## Forward declaration of a type.
{% macro union_decl(type) -%}
class {{type.name}};
{%- endmacro %}

## Class body definition of a tagged union type.
{% macro union_def(union_type) -%}
{{ union_type.doc | as_doc -}}
class {{union_type.name}} {{ "final" if union_type.is_final else ""}} {
public:
    {% for member in union_type.members %}
    {{ _member_def(union_type, member) }}
    {{- "\n" if not loop.last }}
    {% endfor %}

    {% for member in union_type.members %}
    {{ _factory_decl(union_type, member) }}
    {% endfor %}

    {% for member in union_type.members %}
    {{ _constructor_decl(union_type, member) }}
    {% endfor %}

    {{ _special_member_decl(union_type) }}

    {{ union_type.tag.name }} type() const noexcept { return type_; }

    {{ union_ops.format_decl(union_type) }}

    {{ union_ops.hash_decl(union_type) }}

    {% for member in union_type.members %}
    {{ _accessor_decl(union_type, member) }}
    {% endfor %}

    template<typename Visitor, typename... Args>
    TIRO_FORCE_INLINE decltype(auto) visit(Visitor&& vis, Args&&... args) { 
        return visit_impl(*this, std::forward<Visitor>(vis), std::forward<Args>(args)...);
    }

    template<typename Visitor, typename... Args>
    TIRO_FORCE_INLINE decltype(auto) visit(Visitor&& vis, Args&&... args) const { 
        return visit_impl(*this, std::forward<Visitor>(vis), std::forward<Args>(args)...);
    }

private:
    {{ _helper_decl(union_type) }}

    template<typename Self, typename Visitor, typename... Args>
    static TIRO_FORCE_INLINE decltype(auto) visit_impl(Self&& self, Visitor&& vis, Args&&... args);
 
private:
    {{union_type.tag.name}} type_;
    union {
        {% for member in union_type.members %}
        {{ member.name }} {{member.field_name}};
        {% endfor %}
    };
};
{{- union_ops.equality_decl(union_type) -}}
{%- endmacro %}

## Implements the inline functions of a union type.
{% macro union_inline_impl(union_type) -%}
template<typename Self, typename Visitor, typename... Args>
decltype(auto) {{union_type.name}}::visit_impl(Self&& self, Visitor&& vis, Args&&... args) {
    switch (self.type()) {
    {% for member in union_type.members -%}
    case {{union_type.tag.name}}::{{member.name}}:
        return vis.{{member.visit_name}}(self.{{member.field_name}}, std::forward<Args>(args)...);
    {%- endfor %}
    }
    TIRO_UNREACHABLE("Invalid {{union_type.name}} type.");
}
{%- endmacro %}

## Implements the union type's class.
{% macro union_impl(union_type) -%}
{% for member in union_type.members %}
{{ _factory_impl(union_type, member) }}
{{- "\n" if not loop.last }}
{% endfor %}

{% for member in union_type.members %}
{{ _constructor_impl(union_type, member) }}
{{- "\n" if not loop.last }}
{% endfor %}

{{ _special_member_impl(union_type) }}

{% for member in union_type.members %}
{{ _accessor_impl(union_type, member) }}
{{- "\n" if not loop.last }}
{% endfor -%}

{{ union_ops.format_impl(union_type) }}
{{ union_ops.hash_impl(union_type) }}

{{ _helper_impl(union_type) }}

{{ union_ops.equality_impl(union_type) }}
{%- endmacro -%}
