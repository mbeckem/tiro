import std;

func fibonacci_recursive(i) {
    if (i <= 1) {
        return i;
    }
    return fibonacci_recursive(i - 1) + fibonacci_recursive(i - 2);
}

// Note: this is very slow, the number of recursive function calls is exponential.
func start_fibonacci_recursive() {
    fibonacci_recursive(25);
}

// Iterative fibonacci computation.
func fibonacci_iterative(i) {
    if (i <= 1) {
        return i;
    }

    var a = 0;
    var b = 1;
    while (i >= 2) {
        (a, b) = (b, a + b);
        i -= 1;
    }
    return b;
}

func start_fibonacci_iterative() {
    fibonacci_iterative(80);
}

// This example uses a hash table in a closure to memoize fibonacci results.
func fibonacci_memo() {
    const m = Map{};

    var fib;
    fib = func(i) {
        if (m.contains(i)) {
            return m[i];
        }

        const result = if (i <= 1) {
            i;
        } else {
            fib(i - 1) + fib(i - 2);
        };
        return m[i] = result;
    };
    return fib;
}

func start_fibonacci_memo() {
    const fib = fibonacci_memo();
    return fib(80);
}
