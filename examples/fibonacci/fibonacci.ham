func fibonacci_slow(i) {
    if (i <= 1) {
        return i;
    }
    return fibonacci_slow(i - 1) + fibonacci_slow(i - 2);
}

func start_fibonacci_slow() {
    fibonacci_slow(30);
}

// Iterative fibonacci computation.
func fibonacci_fast(i) {
    if (i <= 1) {
        return i;
    }

    var a = 0;
    var b = 1;
    while (i >= 2) {
        var c = a + b;
        a = b;
        b = c;
        i = i - 1;
    }
    return b;
}

func start_fibonacci_fast() {
    fibonacci_fast(80);
}

// This example uses a hash table in a closure to memoize fibonacci results.
func fibonacci_memo() {
    const m = Map{};

    var fib;
    fib = func(i) {
        if (m.contains(i)) {
            return m[i];
        }

        const result = if (i <= 1) {
            i;
        } else {
            fib(i - 1) + fib(i - 2);
        };
        return m[i] = result;
    };
    return fib;
}

func start_fibonacci_memo() {
    const fib = fibonacci_memo();
    return fib(80);
}
