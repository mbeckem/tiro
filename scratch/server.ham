import std;
import std.io;

func main() {
    const listener = io.new_listener();
    listener.reuse_address(true);
    listener.open("0.0.0.0", 12345);

    while (1) {
        const socket = listener.accept();
        std.launch(func() {
            handle_connection(socket);
            socket.close();
        });
    }

    listener.close();    
}

func handle_connection(socket) {
    std.print("open", socket.is_open());
    std.print("remote_endpoint", socket.remote_endpoint());
    std.print("local_endpoint", socket.local_endpoint());

    read_header(socket);

    const reply = "HTTP/1.0 200 OK\r\nServer: hammer-demo/1.0\r\n\r\nHello World\r\n";
    const buffer = std.to_utf8(reply);
    write_all(socket, buffer, 0, buffer.size());
}

func read_header(socket) {
    const buffer_size = 4096;
    const buffer = std.new_buffer(buffer_size);

    const next_byte = {
        var eof = false;
        var byte_count = 0;
        var byte_index = 0;

        func next_byte() {
            if (eof) {
                return null;
            }

            if (byte_index == byte_count) {
                byte_count = socket.read(buffer, 0, buffer_size);
                byte_index = 0;
                
                if (byte_count == 0) {
                    eof = true;
                    return null;
                }
            }

            const byte = buffer[byte_index];
            byte_index = byte_index + 1;
            return byte;
        };
    };

    const read_line = {
        const lf = 10;
        const cr = 13;

        var current;
        var has_cr = false;
        var count = 0;

        func read_line() {
            while (1) {
                current = next_byte();
                if (current == cr) {
                    has_cr = true;
                } else if (current == lf) {
                    has_cr = false;
                    const result = count;
                    count = 0;
                    return result;
                } else {
                    if (has_cr) {
                        count = count + 1;
                        has_cr = false;
                    }
                    count = count + 1;
                }
            }
        }
    };

    while (1) {
        const length = read_line();
        if (length == 0) {
            std.print("End of header");
            break;
        }
    }
}

func write_all(socket, buffer, i, n) {
    while (n > 0) {
        const written = socket.write(buffer, i, n);
        i = i + written;
        n = n - written;
    }
}
