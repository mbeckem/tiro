#!/usr/bin/env python3

import cog
import os
import sys
import re

from datetime import datetime
from jinja2 import FileSystemLoader, Environment

KEYWORDS = {
    "return": "ret",
    "break": "br",
    "continue": "cont",
    "nullptr": "null",
    "true": "t",
    "false": "f",
    "int": "i",
    "double": "d",
    "float": "f",
}


def avoid_keyword(name):
    return KEYWORDS.get(name, name)


class Tag:
    def __init__(self, name, underlying_type, doc=None):
        self.kind = "tag"
        self.name = name
        self.underlying_type = underlying_type
        self.doc = doc
        self.union = None


class TaggedUnion:
    def __init__(self, name, tag, members=None, doc=None):
        self.name = name
        self.kind = "union"
        self.tag = tag
        self.doc = doc
        self.members = [] if members is None else members
        self.format = None
        self.equality = None
        self.hash = None
        self.trivial = True

        if tag.union:
            raise RuntimeError("Tag already belongs to a different union")
        tag.union = self

    # declare: only declare, but do not define the format(FormatStream&) function.
    # define: do both
    def format_function(self, which):
        if which not in [None, "declare", "define"]:
            raise RuntimeError(f"Invalid value for 'which': {which}.")
        self.format = which
        return self

    def equality_mode(self, which):
        if which not in [None, "define"]:
            raise RuntimeError(f"Invalid value for 'which': {which}.")
        self.equality = which
        return self

    def hash_mode(self, which):
        if which not in [None, "define"]:
            raise RuntimeError(f"Invalid value for 'which': {which}.")
        self.hash = which
        return self


class UnionMember:
    def __init__(self, name, kind, doc=None):
        self.name = name

        snake = camel_to_snake(name)
        self.argument_name = avoid_keyword(snake)
        self.accessor_name = "as_" + snake
        self.factory_name = "make_" + snake
        self.field_name = snake + "_"
        self.visit_name = "visit_" + snake
        self.kind = kind
        self.doc = doc

    def set_name(self, name):
        self.name = name
        return self

    def set_argument_name(self, argument_name):
        self.argument_name = argument_name
        return self

    def set_accessor_name(self, accessor_name):
        self.accessor_name = accessor_name
        return self


class UnionMemberStruct(UnionMember):
    def __init__(self, name, members=None, doc=None):
        super().__init__(name, "struct", doc)
        self.members = [] if members is None else members


class UnionMemberAlias(UnionMember):
    def __init__(self, name, target, doc=None):
        super().__init__(name, "alias", doc)
        self.target = target


class StructMember:
    def __init__(self, name, type, doc=None):
        self.name = name
        self.type = type
        self.doc = doc


def make_env():
    templates = os.path.dirname(__file__)
    loader = FileSystemLoader(templates)
    env = Environment(
        loader=loader,
        cache_size=-1,
        lstrip_blocks=True,
        trim_blocks=True,
        line_statement_prefix="#",
        line_comment_prefix="##"
    )
    env.filters["as_comment"] = lambda comment: as_comment(comment, False)
    env.filters["as_doc"] = lambda comment: as_comment(comment, True)

    env.globals["make_warning"] = make_warning
    return env


def make_warning():
    program = sys.argv[0]
    date = datetime.now()
    warning =\
        f"Automatically generated by {program} at {date}.\n" \
        f"Do not edit this file by hand. Do not include this file by itself."
    return warning


def as_comment(comment, is_doc):
    if comment is None:
        return ""
    lines = comment.split("\n")
    prefix = "///" if is_doc else "//"
    return "\n".join(f"{prefix} {line.strip()}" for line in lines)


# Taken from https://stackoverflow.com/a/1176023
first_cap_re = re.compile('(.)([A-Z][a-z]+)')
all_cap_re = re.compile('([a-z0-9])([A-Z])')


def camel_to_snake(name):
    # s1 = first_cap_re.sub(r'\1_\2', name)
    return all_cap_re.sub(r'\1_\2', name).lower()


ENV = make_env()


def declare_type(T):
    templ = ENV.get_template("type_support.jinja2")
    cog.outl(templ.module.declare_type(T))


def define_inlines(T):
    templ = ENV.get_template("type_support.jinja2")
    cog.outl(templ.module.define_inline(T))


def define_type(T):
    templ = ENV.get_template("type_support.jinja2")
    cog.outl(templ.module.define_type(T))


def implement_type(T):
    templ = ENV.get_template("type_support.jinja2")
    cog.outl(templ.module.implement_type(T))
