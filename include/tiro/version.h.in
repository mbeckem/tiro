#ifndef TIRO_VERSION_H_INCLUDED
#define TIRO_VERSION_H_INCLUDED

#include "tiro/def.h"

#ifdef __cplusplus
extern "C" {
#endif

/* clang-format off */

/**
 * Tiro uses semantic versioning. The version number is incremented for every api change.
 * The following macro constructs a single version number by combining the major, minor and
 * patch version parts. The final version number supports comparison through relational operators.
 * 
 * Note that the individual version number parts must be smaller than 1000.
 */
#define TIRO_MAKE_VERSION(major, minor, patch) \
    (uint32_t)((major) * 1000000 + (minor) * 1000 + (patch))

/** The library's version number as a build-time constant. */
#define TIRO_VERSION_NUMBER TIRO_MAKE_VERSION(@PROJECT_VERSION_MAJOR@, @PROJECT_VERSION_MINOR@, @PROJECT_VERSION_PATCH@)

/** The library's version string as a build-time constant. */
#define TIRO_VERSION "@PROJECT_VERSION@"

/** The library's build date as a build-time constant. Not available for development builds. */
#define TIRO_BUILD_DATE "@BUILD_DATE@"

/** The full source id (from version control) as a build-time constant. */
#define TIRO_SOURCE_ID "@SOURCE_ID@"

/** The full version string (for presentation purposes) as a build-time constant. */
#define TIRO_FULL_VERSION "tiro @PROJECT_VERSION@ (@SOURCE_ID@, built on @BUILD_DATE@)"

/**
 * The full version string 
 */

/* clang-format on */

/** 
 * Returns the value of `TIRO_VERSION_NUMBER` at the time the library was built. This may be different
 * than the value observed in `TIRO_VERSION_NUMBER` if the application uses a different library version
 * than it was originally compiled with.
 */
TIRO_API uint32_t tiro_version_number();

/** 
 * The value of `TIRO_VERSION` at the time the library was built. The returned string points into static storage
 * and must not be modified.
 */
TIRO_API const char* tiro_version();

/** 
 * The value of `TIRO_BUILD_DATE` at the time the library was built. The returned string points into static storage
 * and must not be modified.
 */
TIRO_API const char* tiro_build_date();

/** 
 * The value of `TIRO_SOURCE_ID` at the time the library was built. The returned string points into static storage
 * and must not be modified.
 */
TIRO_API const char* tiro_source_id();

/** 
 * The value of `TIRO_FULL_VERSION` at the time the library was built. The returned string points into static storage
 * and must not be modified.
 */
TIRO_API const char* tiro_full_version();

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif // TIRO_VERSION_H_INCLUDED
